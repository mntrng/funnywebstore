{"version":3,"sources":["components/IndividualProduct/index.tsx","components/ProductListPage/index.tsx","App.tsx","hooks/useFetchData.tsx","constants.ts","index.tsx"],"names":["IndividualProduct","product","style","stockInfo","regex","List","selection","celled","size","Item","Content","Label","name","color","stockColor","match","price","manufacturer","map","className","id","ProductListPage","productData","productLoading","stockLoading","stockData","height","width","itemSize","itemCount","length","overscanCount","props","index","get","DATAPAYLOAD","App","useState","page","setPage","error","setError","undefined","setProductData","setStockData","setProductLoading","setStockLoading","useEffect","fetchProductData","a","axios","products","data","console","log","fetchStockData","availabilityData","stockMap","Map","stock","toLowerCase","useFetchData","Container","Segment","inverted","marginBottom","Menu","secondary","active","onClick","Message","icon","Icon","loading","Header","gloves","facemasks","beanies","negative","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2ed1c1ee.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\r\nimport React from 'react';\r\nimport { Product } from '../../types';\r\nimport { Label, List, SemanticCOLORS } from \"semantic-ui-react\";\r\n\r\ninterface IndividualProductProps {\r\n    product: Product\r\n    style: React.CSSProperties\r\n    stockInfo: string\r\n}\r\n\r\nconst IndividualProduct: React.FC<IndividualProductProps> = ({ product, style, stockInfo }) => {\r\n    const regex = /(?<=<INSTOCKVALUE>)(.*)(?=<\\/INSTOCKVALUE>)/g;\r\n    const stockColor = (stockInfo: string): SemanticCOLORS => {\r\n        if (stockInfo === 'OUTOFSTOCK') {\r\n            return 'red';\r\n        } else if (stockInfo === 'LESSTHAN10') {\r\n            return 'orange';\r\n        } else {\r\n            return 'green';\r\n        }\r\n    };\r\n\r\n    return (\r\n        <List selection celled size='large'>\r\n            <List.Item key={product.id} style={style}>\r\n                <List.Content>\r\n                    <Label>{ product.name }</Label> <Label color={stockColor(stockInfo.match(regex)![0])}>{ stockInfo.match(regex)![0] }</Label>\r\n                    <article>Price: { product.price }â‚¬ | Manufacturer: { product.manufacturer } <br/>\r\n                    Available Color: { product.color.map(color => (<Label key={color} className={color}/>)) }\r\n                    </article>\r\n                </List.Content>\r\n            </List.Item>\r\n        </List>\r\n    );\r\n};\r\n\r\nexport default IndividualProduct;","import React from 'react';\r\nimport { FixedSizeList, ListChildComponentProps } from 'react-window';\r\nimport { Product, StockInfo } from '../../types';\r\nimport IndividualProduct from '../IndividualProduct';\r\n\r\ninterface ProductDataProps {\r\n    productData: Product[] | undefined\r\n    productLoading: boolean\r\n    stockLoading: boolean\r\n    stockData: Map<string, StockInfo>\r\n}\r\n\r\nconst ProductListPage: React.FC<ProductDataProps> = ({ productData, productLoading, stockLoading, stockData }) => {\r\n\r\n    if (productData && !stockLoading && !productLoading) {\r\n        const Row = (props: ListChildComponentProps) => {\r\n            const { index, style } = props;\r\n            const stockInfo = stockData.get(productData[index].id);\r\n            return (\r\n                <div>\r\n                    {stockInfo && <IndividualProduct product={ productData[index] } style={ style } stockInfo = { stockInfo?.DATAPAYLOAD }/>}\r\n                </div>\r\n            );\r\n        };\r\n    \r\n        return (\r\n            <div>\r\n                <FixedSizeList\r\n                    height={800}\r\n                    width={'auto'}\r\n                    itemSize={70}\r\n                    itemCount={productData.length}\r\n                    overscanCount={10}\r\n                >\r\n                    {Row}\r\n                </FixedSizeList>\r\n            </div>\r\n        );\r\n    } else {\r\n        return null;\r\n    }\r\n};\r\n\r\nexport default ProductListPage;","\r\nimport { Container, Segment, Menu, Message, Icon } from \"semantic-ui-react\";\r\nimport React, { useState } from 'react';\r\nimport './App.css';\r\nimport ProductListPage from './components/ProductListPage';\r\nimport { useFetchData } from './hooks/useFetchData';\r\n\r\nconst App: React.FC = () => {\r\n\r\n  const [page, setPage] = useState<string>('home');\r\n  const { productLoading, stockLoading, productData, stockData, error } = useFetchData();\r\n\r\n  return (\r\n        <Container className=\"App\">\r\n          <Segment inverted style={{ marginBottom: 25 }}>\r\n            <Menu inverted secondary>\r\n              <Menu.Item\r\n                name='home'\r\n                active={page === 'home'}\r\n                onClick={() => {setPage('home');}}\r\n              />\r\n              <Menu.Item\r\n                name='gloves'\r\n                active={page === 'gloves'}\r\n                onClick={() => {setPage('gloves');}}\r\n              />\r\n              <Menu.Item\r\n                name='face masks'\r\n                active={page === 'facemasks'}\r\n                onClick={() => {setPage('facemasks');}}\r\n              />\r\n              <Menu.Item\r\n                name='beanies'\r\n                active={page === 'beanies'}\r\n                onClick={() => {setPage('beanies');}}\r\n              />\r\n            </Menu>\r\n          </Segment>\r\n\r\n          {productLoading && stockLoading && <Message icon>\r\n                        <Icon name='circle notched' loading />\r\n                          <Message.Content>\r\n                            <Message.Header>Just one second</Message.Header>\r\n                              Fetching the content from another universe for youuuu <Icon name='paw'/>\r\n                          </Message.Content>\r\n                      </Message>}\r\n\r\n          {page === 'gloves' && stockData && <ProductListPage productData = { productData?.gloves } \r\n                                                        productLoading = { productLoading } \r\n                                                        stockLoading = { stockLoading } \r\n                                                        stockData = { stockData }/>}\r\n          {page === 'facemasks' && stockData && <ProductListPage productData = { productData?.facemasks } \r\n                                                        productLoading = { productLoading } \r\n                                                        stockLoading = { stockLoading } \r\n                                                        stockData = { stockData }/>}\r\n          {page === 'beanies' && stockData && <ProductListPage productData = { productData?.beanies } \r\n                                                        productLoading = { productLoading } \r\n                                                        stockLoading = { stockLoading } \r\n                                                        stockData = { stockData }/>}\r\n\r\n          {error && <Message negative>\r\n                      Oops! There is an error. We are working on this...\r\n                    </Message>}\r\n      </Container>\r\n  );\r\n};\r\n\r\nexport default App;","/* eslint-disable @typescript-eslint/no-unsafe-member-access */\r\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { baseProductURL, baseAvailabilityURL } from \"../constants\";\r\nimport { ProductData, StockInfo } from \"../types\";\r\n\r\ninterface ProductResponseProps {\r\n    productLoading: boolean\r\n    stockLoading: boolean\r\n    productData: ProductData | undefined\r\n    stockData: Map<string, StockInfo> | undefined\r\n    error: boolean\r\n}\r\n\r\nexport const useFetchData = (): ProductResponseProps => {\r\n    const [error, setError] = useState(false);\r\n    const [productData, setProductData] = useState<ProductData | undefined>(undefined);\r\n    const [stockData, setStockData] = useState<Map<string, StockInfo>>();\r\n    const [productLoading, setProductLoading] = useState(true);\r\n    const [stockLoading, setStockLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        const fetchProductData = async () => {\r\n            try {\r\n                const { data: products } = await axios.get<ProductData>(baseProductURL);\r\n                setProductData(products);\r\n                setProductLoading(false);\r\n            } catch (error) {\r\n                setError(true);\r\n                setProductLoading(false);\r\n                console.log(error);\r\n            }\r\n        };\r\n\r\n        const fetchStockData = async () => {\r\n            try {\r\n                const { data: availabilityData } = await axios.get<StockInfo[]>(baseAvailabilityURL);\r\n\r\n                // Creates a map of availability data for faster searching\r\n                const stockMap = new Map(availabilityData.map(stock => [stock.id.toLowerCase(), stock]));\r\n                setStockData(stockMap);\r\n                setStockLoading(false);\r\n            } catch (error) {\r\n                setError(true);\r\n                setStockLoading(false);\r\n                console.log(error);\r\n            }\r\n        };\r\n\r\n        void fetchProductData();\r\n        void fetchStockData();\r\n    }, []);\r\n\r\n    return { productLoading, stockLoading, productData, stockData, error };\r\n};","export const baseProductURL = '/api/products';\r\nexport const baseAvailabilityURL = '/api/availability';","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}